kind: Template
apiVersion: v1
metadata:
  annotations:
    description: National Parks
    tags: nationalparks, parksmap
  name: nationalparks
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: nationalparks
- description: The name for the application.
  name: GIT_URL
  required: true
  value: https://github.com/clerixmaxime/ParksMap.git
- description: The name for the application.
  name: GIT_REF
  required: false
  value: master
- description: The name for the application.
  name: CONTEXT_DIR
  required: false
  value: nationalparks
- description: URL of the Maven mirror
  name: MAVEN_MIRROR_URL
  required: false
- displayName: Github secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_SECRET
- displayName: Generic secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_SECRET
- description: URL of the Maven mirror
  name: MONGODB_DATABASE
  required: false
  value: nationalparks
- description: URL of the Maven mirror
  name: MONGODB_USER
  required: false
  value: nationalparks
- description: URL of the Maven mirror
  name: MONGODB_PASSWORD
  from: '[a-zA-Z0-9]{8}'
  generate: expression
- description: URL of the Maven mirror
  name: MONGODB_ADMIN_USER
  required: false
  value: nationalparks
- description: URL of the Maven mirror
  name: MONGODB_ADMIN_PASSWORD
  from: '[a-zA-Z0-9]{8}'
  generate: expression
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      application: ${APPLICATION_NAME}
      bundle: parksmap-app
    name: ${APPLICATION_NAME}
  spec: {}
  status:
      dockerImageRepository: ''
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        forcePull: true
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: openshift
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_SECRET}
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: mongodb-${APPLICATION_NAME}
    name: mongodb-${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      name: mongodb-${APPLICATION_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          bundle: parksmap-app
          name: mongodb-${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              configMapKeyRef:
                key: MONGODB_USER
                name: ${APPLICATION_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MONGODB_PASSWORD
                name: ${APPLICATION_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MONGODB_ADMIN_PASSWORD
                name: ${APPLICATION_NAME}
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: MONGODB_DATABASE
                name: ${APPLICATION_NAME}
          image: registry.access.redhat.com/rhscl/mongodb-32-rhel7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-${APPLICATION_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongodb-${APPLICATION_NAME}-data
          persistentVolumeClaim:
            claimName: mongodb-${APPLICATION_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        post:
          execNewPod:
            command:
            - curl
            - http://${APPLICATION_NAME}:8080/ws/data/load
            containerName: ${APPLICATION_NAME}
          failurePolicy: Ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          bundle: parksmap-app
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: MONGODB_DATABASE
                name: ${APPLICATION_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: MONGODB_PASSWORD
                name: ${APPLICATION_NAME}
          - name: MONGODB_SERVER_HOST
            valueFrom:
              configMapKeyRef:
                key: MONGODB_SERVER_HOST
                name: ${APPLICATION_NAME}
          - name: MONGODB_SERVER_PORT
            valueFrom:
              configMapKeyRef:
                key: MONGODB_SERVER_PORT
                name: ${APPLICATION_NAME}
          - name: MONGODB_USER
            valueFrom:
              configMapKeyRef:
                key: MONGODB_USER
                name: ${APPLICATION_NAME}
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8443
            name: https
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: mongodb-${APPLICATION_NAME}
    name: mongodb-${APPLICATION_NAME}
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: mongodb-${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: ${APPLICATION_NAME}
      type: parksmap-backend
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      bundle: parksmap-app
      application: ${APPLICATION_NAME}
    name: mongodb-${APPLICATION_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  data:
    MONGODB_DATABASE: ${MONGODB_DATABASE}
    MONGODB_PASSWORD: ${MONGODB_PASSWORD}
    MONGODB_SERVER_HOST: mongodb-${APPLICATION_NAME}
    MONGODB_SERVER_PORT: "27017"
    MONGODB_USER: ${MONGODB_USER}
    MONGODB_ADMIN_USER: ${MONGODB_ADMIN_USER}
    MONGODB_ADMIN_PASSWORD: ${MONGODB_ADMIN_PASSWORD}
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}
